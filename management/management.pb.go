// Code generated by protoc-gen-go. DO NOT EDIT.
// source: management.proto

package management

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{1}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ListString struct {
	Value                []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListString) Reset()         { *m = ListString{} }
func (m *ListString) String() string { return proto.CompactTextString(m) }
func (*ListString) ProtoMessage()    {}
func (*ListString) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{2}
}

func (m *ListString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListString.Unmarshal(m, b)
}
func (m *ListString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListString.Marshal(b, m, deterministic)
}
func (m *ListString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListString.Merge(m, src)
}
func (m *ListString) XXX_Size() int {
	return xxx_messageInfo_ListString.Size(m)
}
func (m *ListString) XXX_DiscardUnknown() {
	xxx_messageInfo_ListString.DiscardUnknown(m)
}

var xxx_messageInfo_ListString proto.InternalMessageInfo

func (m *ListString) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type Workout struct {
	WorkoutName          string   `protobuf:"bytes,2,opt,name=workout_name,json=workoutName,proto3" json:"workout_name,omitempty"`
	Offset               uint32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Period               uint32   `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Workout) Reset()         { *m = Workout{} }
func (m *Workout) String() string { return proto.CompactTextString(m) }
func (*Workout) ProtoMessage()    {}
func (*Workout) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{3}
}

func (m *Workout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workout.Unmarshal(m, b)
}
func (m *Workout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workout.Marshal(b, m, deterministic)
}
func (m *Workout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workout.Merge(m, src)
}
func (m *Workout) XXX_Size() int {
	return xxx_messageInfo_Workout.Size(m)
}
func (m *Workout) XXX_DiscardUnknown() {
	xxx_messageInfo_Workout.DiscardUnknown(m)
}

var xxx_messageInfo_Workout proto.InternalMessageInfo

func (m *Workout) GetWorkoutName() string {
	if m != nil {
		return m.WorkoutName
	}
	return ""
}

func (m *Workout) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Workout) GetPeriod() uint32 {
	if m != nil {
		return m.Period
	}
	return 0
}

type RoutineWorkout struct {
	RountineName         string   `protobuf:"bytes,1,opt,name=rountine_name,json=rountineName,proto3" json:"rountine_name,omitempty"`
	Workout              *Workout `protobuf:"bytes,2,opt,name=workout,proto3" json:"workout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutineWorkout) Reset()         { *m = RoutineWorkout{} }
func (m *RoutineWorkout) String() string { return proto.CompactTextString(m) }
func (*RoutineWorkout) ProtoMessage()    {}
func (*RoutineWorkout) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{4}
}

func (m *RoutineWorkout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutineWorkout.Unmarshal(m, b)
}
func (m *RoutineWorkout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutineWorkout.Marshal(b, m, deterministic)
}
func (m *RoutineWorkout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutineWorkout.Merge(m, src)
}
func (m *RoutineWorkout) XXX_Size() int {
	return xxx_messageInfo_RoutineWorkout.Size(m)
}
func (m *RoutineWorkout) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutineWorkout.DiscardUnknown(m)
}

var xxx_messageInfo_RoutineWorkout proto.InternalMessageInfo

func (m *RoutineWorkout) GetRountineName() string {
	if m != nil {
		return m.RountineName
	}
	return ""
}

func (m *RoutineWorkout) GetWorkout() *Workout {
	if m != nil {
		return m.Workout
	}
	return nil
}

type Set struct {
	LiftType string `protobuf:"bytes,1,opt,name=lift_type,json=liftType,proto3" json:"lift_type,omitempty"`
	// Types that are valid to be assigned to Weight:
	//	*Set_Absolute
	//	*Set_PercentageMax
	Weight               isSet_Weight `protobuf_oneof:"weight"`
	Reps                 uint32       `protobuf:"varint,4,opt,name=reps,proto3" json:"reps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Set) Reset()         { *m = Set{} }
func (m *Set) String() string { return proto.CompactTextString(m) }
func (*Set) ProtoMessage()    {}
func (*Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{5}
}

func (m *Set) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Set.Unmarshal(m, b)
}
func (m *Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Set.Marshal(b, m, deterministic)
}
func (m *Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Set.Merge(m, src)
}
func (m *Set) XXX_Size() int {
	return xxx_messageInfo_Set.Size(m)
}
func (m *Set) XXX_DiscardUnknown() {
	xxx_messageInfo_Set.DiscardUnknown(m)
}

var xxx_messageInfo_Set proto.InternalMessageInfo

func (m *Set) GetLiftType() string {
	if m != nil {
		return m.LiftType
	}
	return ""
}

type isSet_Weight interface {
	isSet_Weight()
}

type Set_Absolute struct {
	Absolute uint32 `protobuf:"varint,2,opt,name=absolute,proto3,oneof"`
}

type Set_PercentageMax struct {
	PercentageMax uint32 `protobuf:"varint,3,opt,name=percentage_max,json=percentageMax,proto3,oneof"`
}

func (*Set_Absolute) isSet_Weight() {}

func (*Set_PercentageMax) isSet_Weight() {}

func (m *Set) GetWeight() isSet_Weight {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *Set) GetAbsolute() uint32 {
	if x, ok := m.GetWeight().(*Set_Absolute); ok {
		return x.Absolute
	}
	return 0
}

func (m *Set) GetPercentageMax() uint32 {
	if x, ok := m.GetWeight().(*Set_PercentageMax); ok {
		return x.PercentageMax
	}
	return 0
}

func (m *Set) GetReps() uint32 {
	if m != nil {
		return m.Reps
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Set) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Set_Absolute)(nil),
		(*Set_PercentageMax)(nil),
	}
}

type WorkoutSet struct {
	WorkoutName          string   `protobuf:"bytes,1,opt,name=workout_name,json=workoutName,proto3" json:"workout_name,omitempty"`
	Set                  *Set     `protobuf:"bytes,2,opt,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkoutSet) Reset()         { *m = WorkoutSet{} }
func (m *WorkoutSet) String() string { return proto.CompactTextString(m) }
func (*WorkoutSet) ProtoMessage()    {}
func (*WorkoutSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{6}
}

func (m *WorkoutSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkoutSet.Unmarshal(m, b)
}
func (m *WorkoutSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkoutSet.Marshal(b, m, deterministic)
}
func (m *WorkoutSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkoutSet.Merge(m, src)
}
func (m *WorkoutSet) XXX_Size() int {
	return xxx_messageInfo_WorkoutSet.Size(m)
}
func (m *WorkoutSet) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkoutSet.DiscardUnknown(m)
}

var xxx_messageInfo_WorkoutSet proto.InternalMessageInfo

func (m *WorkoutSet) GetWorkoutName() string {
	if m != nil {
		return m.WorkoutName
	}
	return ""
}

func (m *WorkoutSet) GetSet() *Set {
	if m != nil {
		return m.Set
	}
	return nil
}

type Cardio struct {
	CardioType string `protobuf:"bytes,1,opt,name=cardio_type,json=cardioType,proto3" json:"cardio_type,omitempty"`
	// Types that are valid to be assigned to Weight:
	//	*Cardio_Absolute
	//	*Cardio_PercentageMax
	Weight               isCardio_Weight `protobuf_oneof:"weight"`
	Time                 uint32          `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Cardio) Reset()         { *m = Cardio{} }
func (m *Cardio) String() string { return proto.CompactTextString(m) }
func (*Cardio) ProtoMessage()    {}
func (*Cardio) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{7}
}

func (m *Cardio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cardio.Unmarshal(m, b)
}
func (m *Cardio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cardio.Marshal(b, m, deterministic)
}
func (m *Cardio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cardio.Merge(m, src)
}
func (m *Cardio) XXX_Size() int {
	return xxx_messageInfo_Cardio.Size(m)
}
func (m *Cardio) XXX_DiscardUnknown() {
	xxx_messageInfo_Cardio.DiscardUnknown(m)
}

var xxx_messageInfo_Cardio proto.InternalMessageInfo

func (m *Cardio) GetCardioType() string {
	if m != nil {
		return m.CardioType
	}
	return ""
}

type isCardio_Weight interface {
	isCardio_Weight()
}

type Cardio_Absolute struct {
	Absolute uint32 `protobuf:"varint,2,opt,name=absolute,proto3,oneof"`
}

type Cardio_PercentageMax struct {
	PercentageMax uint32 `protobuf:"varint,3,opt,name=percentage_max,json=percentageMax,proto3,oneof"`
}

func (*Cardio_Absolute) isCardio_Weight() {}

func (*Cardio_PercentageMax) isCardio_Weight() {}

func (m *Cardio) GetWeight() isCardio_Weight {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *Cardio) GetAbsolute() uint32 {
	if x, ok := m.GetWeight().(*Cardio_Absolute); ok {
		return x.Absolute
	}
	return 0
}

func (m *Cardio) GetPercentageMax() uint32 {
	if x, ok := m.GetWeight().(*Cardio_PercentageMax); ok {
		return x.PercentageMax
	}
	return 0
}

func (m *Cardio) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Cardio) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Cardio_Absolute)(nil),
		(*Cardio_PercentageMax)(nil),
	}
}

type WorkoutCardio struct {
	WorkoutName          string   `protobuf:"bytes,1,opt,name=workout_name,json=workoutName,proto3" json:"workout_name,omitempty"`
	Cardio               *Cardio  `protobuf:"bytes,2,opt,name=cardio,proto3" json:"cardio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkoutCardio) Reset()         { *m = WorkoutCardio{} }
func (m *WorkoutCardio) String() string { return proto.CompactTextString(m) }
func (*WorkoutCardio) ProtoMessage()    {}
func (*WorkoutCardio) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{8}
}

func (m *WorkoutCardio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkoutCardio.Unmarshal(m, b)
}
func (m *WorkoutCardio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkoutCardio.Marshal(b, m, deterministic)
}
func (m *WorkoutCardio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkoutCardio.Merge(m, src)
}
func (m *WorkoutCardio) XXX_Size() int {
	return xxx_messageInfo_WorkoutCardio.Size(m)
}
func (m *WorkoutCardio) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkoutCardio.DiscardUnknown(m)
}

var xxx_messageInfo_WorkoutCardio proto.InternalMessageInfo

func (m *WorkoutCardio) GetWorkoutName() string {
	if m != nil {
		return m.WorkoutName
	}
	return ""
}

func (m *WorkoutCardio) GetCardio() *Cardio {
	if m != nil {
		return m.Cardio
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*String)(nil), "String")
	proto.RegisterType((*ListString)(nil), "ListString")
	proto.RegisterType((*Workout)(nil), "Workout")
	proto.RegisterType((*RoutineWorkout)(nil), "RoutineWorkout")
	proto.RegisterType((*Set)(nil), "Set")
	proto.RegisterType((*WorkoutSet)(nil), "WorkoutSet")
	proto.RegisterType((*Cardio)(nil), "Cardio")
	proto.RegisterType((*WorkoutCardio)(nil), "WorkoutCardio")
}

func init() { proto.RegisterFile("management.proto", fileDescriptor_edc174f991dc0a25) }

var fileDescriptor_edc174f991dc0a25 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x49, 0xeb, 0x24, 0xe3, 0x38, 0x6d, 0x57, 0x08, 0x45, 0x05, 0x35, 0xe9, 0x06, 0x44,
	0xbe, 0xfc, 0x11, 0x4e, 0x10, 0xa2, 0x8a, 0x22, 0xb5, 0x7c, 0x38, 0x48, 0x08, 0x09, 0x29, 0xda,
	0xc6, 0x93, 0x60, 0x11, 0x7b, 0xad, 0xf5, 0xa6, 0x4d, 0x4e, 0xc0, 0x1f, 0x67, 0xe0, 0x3a, 0x9c,
	0x85, 0x4b, 0xa0, 0xf5, 0xee, 0x36, 0x86, 0xc4, 0x88, 0x0f, 0xfe, 0x76, 0xdf, 0x3c, 0xcf, 0xbc,
	0x37, 0x3b, 0x63, 0x38, 0x49, 0x58, 0xca, 0x16, 0x98, 0x60, 0x2a, 0x83, 0x4c, 0x70, 0xc9, 0x69,
	0x1d, 0x8e, 0x2e, 0x93, 0x4c, 0x6e, 0xe8, 0x39, 0xb8, 0x13, 0x29, 0xe2, 0x74, 0x41, 0x1e, 0xc3,
	0xd1, 0x1d, 0x5b, 0xae, 0xb0, 0xe3, 0xf4, 0x9c, 0x41, 0x33, 0xd4, 0x17, 0x4a, 0x01, 0xae, 0xe3,
	0x5c, 0xee, 0x72, 0x6a, 0x5b, 0xce, 0x27, 0xa8, 0x7f, 0xe0, 0xe2, 0x0b, 0x5f, 0x49, 0x72, 0x01,
	0xad, 0x7b, 0x7d, 0x9c, 0xa6, 0x2c, 0xc1, 0xce, 0xa3, 0x22, 0x97, 0x67, 0xb0, 0x77, 0x2c, 0x41,
	0xf2, 0x04, 0x5c, 0x3e, 0x9f, 0xe7, 0x28, 0x3b, 0xb5, 0x9e, 0x33, 0xf0, 0x43, 0x73, 0x53, 0x78,
	0x86, 0x22, 0xe6, 0x51, 0xe7, 0x50, 0xe3, 0xfa, 0x46, 0x3f, 0x42, 0x3b, 0xe4, 0x2b, 0x19, 0xa7,
	0x68, 0x8b, 0xf4, 0xc1, 0x17, 0x7c, 0x95, 0x2a, 0x48, 0x57, 0xd1, 0x8a, 0x5b, 0x16, 0x2c, 0xca,
	0x50, 0xa8, 0x9b, 0xaa, 0x85, 0x08, 0x6f, 0xd8, 0x08, 0xcc, 0xf7, 0xa1, 0x0d, 0xd0, 0xaf, 0x0e,
	0xd4, 0x26, 0x28, 0xc9, 0x53, 0x68, 0x2e, 0xe3, 0xb9, 0x9c, 0xca, 0x4d, 0x66, 0x93, 0x35, 0x14,
	0xf0, 0x7e, 0x93, 0x21, 0x79, 0x06, 0x0d, 0x76, 0x9b, 0xf3, 0xe5, 0x4a, 0x6a, 0x3b, 0xfe, 0xd5,
	0x41, 0xf8, 0x80, 0x90, 0x97, 0xd0, 0xce, 0x50, 0xcc, 0x30, 0x95, 0x6c, 0x81, 0xd3, 0x84, 0xad,
	0xb5, 0xab, 0xab, 0x83, 0xd0, 0xdf, 0xe2, 0x37, 0x6c, 0x4d, 0x08, 0x1c, 0x0a, 0xcc, 0x72, 0x63,
	0xae, 0x38, 0xbf, 0x6e, 0x80, 0x7b, 0x8f, 0xf1, 0xe2, 0xb3, 0xa4, 0x6f, 0x00, 0x8c, 0x3a, 0xa5,
	0xe7, 0xcf, 0x2e, 0x3a, 0xfb, 0xba, 0x58, 0x53, 0x2d, 0xd4, 0xd6, 0x0e, 0x83, 0x09, 0xca, 0x50,
	0x01, 0xf4, 0x9b, 0x03, 0xee, 0x98, 0x89, 0x28, 0xe6, 0xa4, 0x0b, 0xde, 0xac, 0x38, 0x95, 0x7d,
	0x81, 0x86, 0xfe, 0xb3, 0x33, 0x19, 0x27, 0x68, 0x9d, 0xa9, 0x73, 0xc9, 0xd9, 0x04, 0x7c, 0xe3,
	0xcc, 0xc8, 0xfa, 0x07, 0x73, 0x5d, 0x70, 0xb5, 0x4c, 0xe3, 0xaf, 0x1e, 0xe8, 0x6f, 0x43, 0x03,
	0x0f, 0x7f, 0x3a, 0x40, 0x2e, 0xd7, 0x28, 0x66, 0x71, 0x8e, 0x37, 0x0f, 0xb3, 0x4d, 0xce, 0xc1,
	0x1b, 0x45, 0xd1, 0xb5, 0x7d, 0xb9, 0x7a, 0xa0, 0xc7, 0xf6, 0xcc, 0x0d, 0x8a, 0x61, 0x27, 0x17,
	0xd0, 0x0e, 0x31, 0xe1, 0x77, 0x58, 0x4d, 0x79, 0x0e, 0xbe, 0x9a, 0x77, 0x4b, 0xc8, 0x89, 0x09,
	0x9c, 0x79, 0x41, 0x69, 0x0f, 0x7a, 0xe0, 0x8f, 0xa2, 0x68, 0xbc, 0x6d, 0xe5, 0x4e, 0x9e, 0x3e,
	0x9c, 0xe8, 0x52, 0x7f, 0x23, 0xbd, 0x80, 0xb6, 0x4a, 0x5a, 0xa2, 0xec, 0xab, 0x36, 0xfc, 0xe1,
	0xc0, 0xa9, 0x59, 0x81, 0x92, 0x59, 0x0a, 0xc7, 0xa3, 0x28, 0x2a, 0xe8, 0x26, 0xb8, 0x5b, 0xa0,
	0x0b, 0xad, 0xf1, 0x92, 0xa7, 0x58, 0x49, 0xe8, 0x81, 0xaf, 0x65, 0x56, 0x32, 0xfa, 0xd0, 0x52,
	0x52, 0x4c, 0xbc, 0xa2, 0x1f, 0x03, 0xf0, 0xdf, 0xa6, 0x39, 0x0a, 0x69, 0x57, 0xf4, 0x38, 0xf8,
	0x7d, 0x67, 0x6d, 0xba, 0xe1, 0x77, 0x07, 0x4e, 0x0d, 0xb6, 0xdf, 0x8b, 0xcd, 0x50, 0x2d, 0xb5,
	0x92, 0x61, 0xa4, 0x9a, 0x78, 0xe5, 0xd3, 0x35, 0xb5, 0x54, 0xb5, 0x68, 0x5e, 0xb0, 0xdd, 0x3a,
	0x9b, 0xe6, 0xd6, 0x2d, 0x7e, 0x91, 0xaf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x5c, 0x62,
	0xcd, 0x36, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExerciseManagementClient is the client API for ExerciseManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExerciseManagementClient interface {
	AddLiftType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	RemoveLiftType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	ListLiftTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error)
	AddCardioType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	RemoveCardioType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	ListCardioType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error)
}

type exerciseManagementClient struct {
	cc *grpc.ClientConn
}

func NewExerciseManagementClient(cc *grpc.ClientConn) ExerciseManagementClient {
	return &exerciseManagementClient{cc}
}

func (c *exerciseManagementClient) AddLiftType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ExerciseManagement/AddLiftType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseManagementClient) RemoveLiftType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ExerciseManagement/RemoveLiftType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseManagementClient) ListLiftTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error) {
	out := new(ListString)
	err := c.cc.Invoke(ctx, "/ExerciseManagement/ListLiftTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseManagementClient) AddCardioType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ExerciseManagement/AddCardioType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseManagementClient) RemoveCardioType(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ExerciseManagement/RemoveCardioType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseManagementClient) ListCardioType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error) {
	out := new(ListString)
	err := c.cc.Invoke(ctx, "/ExerciseManagement/ListCardioType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExerciseManagementServer is the server API for ExerciseManagement service.
type ExerciseManagementServer interface {
	AddLiftType(context.Context, *String) (*Empty, error)
	RemoveLiftType(context.Context, *String) (*Empty, error)
	ListLiftTypes(context.Context, *Empty) (*ListString, error)
	AddCardioType(context.Context, *String) (*Empty, error)
	RemoveCardioType(context.Context, *String) (*Empty, error)
	ListCardioType(context.Context, *Empty) (*ListString, error)
}

// UnimplementedExerciseManagementServer can be embedded to have forward compatible implementations.
type UnimplementedExerciseManagementServer struct {
}

func (*UnimplementedExerciseManagementServer) AddLiftType(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiftType not implemented")
}
func (*UnimplementedExerciseManagementServer) RemoveLiftType(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLiftType not implemented")
}
func (*UnimplementedExerciseManagementServer) ListLiftTypes(ctx context.Context, req *Empty) (*ListString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiftTypes not implemented")
}
func (*UnimplementedExerciseManagementServer) AddCardioType(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardioType not implemented")
}
func (*UnimplementedExerciseManagementServer) RemoveCardioType(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCardioType not implemented")
}
func (*UnimplementedExerciseManagementServer) ListCardioType(ctx context.Context, req *Empty) (*ListString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCardioType not implemented")
}

func RegisterExerciseManagementServer(s *grpc.Server, srv ExerciseManagementServer) {
	s.RegisterService(&_ExerciseManagement_serviceDesc, srv)
}

func _ExerciseManagement_AddLiftType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseManagementServer).AddLiftType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExerciseManagement/AddLiftType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseManagementServer).AddLiftType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseManagement_RemoveLiftType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseManagementServer).RemoveLiftType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExerciseManagement/RemoveLiftType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseManagementServer).RemoveLiftType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseManagement_ListLiftTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseManagementServer).ListLiftTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExerciseManagement/ListLiftTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseManagementServer).ListLiftTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseManagement_AddCardioType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseManagementServer).AddCardioType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExerciseManagement/AddCardioType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseManagementServer).AddCardioType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseManagement_RemoveCardioType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseManagementServer).RemoveCardioType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExerciseManagement/RemoveCardioType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseManagementServer).RemoveCardioType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseManagement_ListCardioType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseManagementServer).ListCardioType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExerciseManagement/ListCardioType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseManagementServer).ListCardioType(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExerciseManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ExerciseManagement",
	HandlerType: (*ExerciseManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLiftType",
			Handler:    _ExerciseManagement_AddLiftType_Handler,
		},
		{
			MethodName: "RemoveLiftType",
			Handler:    _ExerciseManagement_RemoveLiftType_Handler,
		},
		{
			MethodName: "ListLiftTypes",
			Handler:    _ExerciseManagement_ListLiftTypes_Handler,
		},
		{
			MethodName: "AddCardioType",
			Handler:    _ExerciseManagement_AddCardioType_Handler,
		},
		{
			MethodName: "RemoveCardioType",
			Handler:    _ExerciseManagement_RemoveCardioType_Handler,
		},
		{
			MethodName: "ListCardioType",
			Handler:    _ExerciseManagement_ListCardioType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}

// RoutineManagementClient is the client API for RoutineManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoutineManagementClient interface {
	AddEmptyRoutine(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	CloneRoutine(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	RemoveRoutine(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	ListRoutines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error)
	InsertWorkout(ctx context.Context, in *RoutineWorkout, opts ...grpc.CallOption) (*Empty, error)
}

type routineManagementClient struct {
	cc *grpc.ClientConn
}

func NewRoutineManagementClient(cc *grpc.ClientConn) RoutineManagementClient {
	return &routineManagementClient{cc}
}

func (c *routineManagementClient) AddEmptyRoutine(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RoutineManagement/AddEmptyRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineManagementClient) CloneRoutine(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RoutineManagement/CloneRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineManagementClient) RemoveRoutine(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RoutineManagement/RemoveRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineManagementClient) ListRoutines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error) {
	out := new(ListString)
	err := c.cc.Invoke(ctx, "/RoutineManagement/ListRoutines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineManagementClient) InsertWorkout(ctx context.Context, in *RoutineWorkout, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RoutineManagement/InsertWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutineManagementServer is the server API for RoutineManagement service.
type RoutineManagementServer interface {
	AddEmptyRoutine(context.Context, *String) (*Empty, error)
	CloneRoutine(context.Context, *String) (*Empty, error)
	RemoveRoutine(context.Context, *String) (*Empty, error)
	ListRoutines(context.Context, *Empty) (*ListString, error)
	InsertWorkout(context.Context, *RoutineWorkout) (*Empty, error)
}

// UnimplementedRoutineManagementServer can be embedded to have forward compatible implementations.
type UnimplementedRoutineManagementServer struct {
}

func (*UnimplementedRoutineManagementServer) AddEmptyRoutine(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmptyRoutine not implemented")
}
func (*UnimplementedRoutineManagementServer) CloneRoutine(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneRoutine not implemented")
}
func (*UnimplementedRoutineManagementServer) RemoveRoutine(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoutine not implemented")
}
func (*UnimplementedRoutineManagementServer) ListRoutines(ctx context.Context, req *Empty) (*ListString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutines not implemented")
}
func (*UnimplementedRoutineManagementServer) InsertWorkout(ctx context.Context, req *RoutineWorkout) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertWorkout not implemented")
}

func RegisterRoutineManagementServer(s *grpc.Server, srv RoutineManagementServer) {
	s.RegisterService(&_RoutineManagement_serviceDesc, srv)
}

func _RoutineManagement_AddEmptyRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineManagementServer).AddEmptyRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoutineManagement/AddEmptyRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineManagementServer).AddEmptyRoutine(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineManagement_CloneRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineManagementServer).CloneRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoutineManagement/CloneRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineManagementServer).CloneRoutine(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineManagement_RemoveRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineManagementServer).RemoveRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoutineManagement/RemoveRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineManagementServer).RemoveRoutine(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineManagement_ListRoutines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineManagementServer).ListRoutines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoutineManagement/ListRoutines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineManagementServer).ListRoutines(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineManagement_InsertWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutineWorkout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineManagementServer).InsertWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoutineManagement/InsertWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineManagementServer).InsertWorkout(ctx, req.(*RoutineWorkout))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutineManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RoutineManagement",
	HandlerType: (*RoutineManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEmptyRoutine",
			Handler:    _RoutineManagement_AddEmptyRoutine_Handler,
		},
		{
			MethodName: "CloneRoutine",
			Handler:    _RoutineManagement_CloneRoutine_Handler,
		},
		{
			MethodName: "RemoveRoutine",
			Handler:    _RoutineManagement_RemoveRoutine_Handler,
		},
		{
			MethodName: "ListRoutines",
			Handler:    _RoutineManagement_ListRoutines_Handler,
		},
		{
			MethodName: "InsertWorkout",
			Handler:    _RoutineManagement_InsertWorkout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}

// WorkoutManagementClient is the client API for WorkoutManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkoutManagementClient interface {
	AddEmptyWorkout(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	RemoveWorkout(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	ListWorkouts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error)
	InsertSet(ctx context.Context, in *WorkoutSet, opts ...grpc.CallOption) (*Empty, error)
}

type workoutManagementClient struct {
	cc *grpc.ClientConn
}

func NewWorkoutManagementClient(cc *grpc.ClientConn) WorkoutManagementClient {
	return &workoutManagementClient{cc}
}

func (c *workoutManagementClient) AddEmptyWorkout(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/WorkoutManagement/AddEmptyWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutManagementClient) RemoveWorkout(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/WorkoutManagement/RemoveWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutManagementClient) ListWorkouts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListString, error) {
	out := new(ListString)
	err := c.cc.Invoke(ctx, "/WorkoutManagement/ListWorkouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutManagementClient) InsertSet(ctx context.Context, in *WorkoutSet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/WorkoutManagement/InsertSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkoutManagementServer is the server API for WorkoutManagement service.
type WorkoutManagementServer interface {
	AddEmptyWorkout(context.Context, *String) (*Empty, error)
	RemoveWorkout(context.Context, *String) (*Empty, error)
	ListWorkouts(context.Context, *Empty) (*ListString, error)
	InsertSet(context.Context, *WorkoutSet) (*Empty, error)
}

// UnimplementedWorkoutManagementServer can be embedded to have forward compatible implementations.
type UnimplementedWorkoutManagementServer struct {
}

func (*UnimplementedWorkoutManagementServer) AddEmptyWorkout(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmptyWorkout not implemented")
}
func (*UnimplementedWorkoutManagementServer) RemoveWorkout(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkout not implemented")
}
func (*UnimplementedWorkoutManagementServer) ListWorkouts(ctx context.Context, req *Empty) (*ListString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkouts not implemented")
}
func (*UnimplementedWorkoutManagementServer) InsertSet(ctx context.Context, req *WorkoutSet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSet not implemented")
}

func RegisterWorkoutManagementServer(s *grpc.Server, srv WorkoutManagementServer) {
	s.RegisterService(&_WorkoutManagement_serviceDesc, srv)
}

func _WorkoutManagement_AddEmptyWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutManagementServer).AddEmptyWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkoutManagement/AddEmptyWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutManagementServer).AddEmptyWorkout(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutManagement_RemoveWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutManagementServer).RemoveWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkoutManagement/RemoveWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutManagementServer).RemoveWorkout(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutManagement_ListWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutManagementServer).ListWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkoutManagement/ListWorkouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutManagementServer).ListWorkouts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutManagement_InsertSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkoutSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutManagementServer).InsertSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkoutManagement/InsertSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutManagementServer).InsertSet(ctx, req.(*WorkoutSet))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkoutManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WorkoutManagement",
	HandlerType: (*WorkoutManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEmptyWorkout",
			Handler:    _WorkoutManagement_AddEmptyWorkout_Handler,
		},
		{
			MethodName: "RemoveWorkout",
			Handler:    _WorkoutManagement_RemoveWorkout_Handler,
		},
		{
			MethodName: "ListWorkouts",
			Handler:    _WorkoutManagement_ListWorkouts_Handler,
		},
		{
			MethodName: "InsertSet",
			Handler:    _WorkoutManagement_InsertSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}
